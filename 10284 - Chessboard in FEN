#include <stdio.h>
#include <iostream>
#include <fstream>
#include <cstring>
#include <cctype>
#include <math.h>
using namespace std;
int board[8][8];
int x, y;
char t;
bool CharacterAnalyser_if_piece_then_return_true(char sym,int * pos) {
	sym = tolower(sym);
	switch (sym)
	{
	case 'p':break;
	case 'n':break;
	case 'b':;break;
	case'r':break;
	case 'q':break;
	case 'k':break;
	default:
		*pos += sym - '0';return false;
	}
	return true;

}
void mark(int row, int column,int d) {
	//if (row == 0 && column == 0)
	//	printf("hey");
	board[row][column] = d;
}
void whitePawn(int row,int column) {
	//mark(row, column,2);
	if (row != 0) {
		if (board[row - 1][column - 1] != 2 && (row - 1 >= 0 && column - 1 >= 0))
			mark(row - 1, column - 1,1);
		if (board[row - 1][column + 1] != 2 && (row - 1 >= 0 && column + 1 <= 7))
			mark(row - 1, column + 1, 1);

	}

}
void Knight(int row, int column) {
	//mark(row, column,2);

	for (int i = -2; i <= 2; i++)
	{
		for (int  j = -2; j <= 2; j++)
		{
			if (j == 0 || i == 0)
				continue;
			if (abs(j) == abs(i))
				continue;
			if (board[row + i][column + j] != 2 && row + i >= 0 && row + i <= 7 && column + j >= 0 &&  column +j <= 7)
			mark(row + i, column + j,1);
		}
	}

}
void blackPawn(int row, int column) {
	//mark(row, column,2);
	if (row != 7)
	{
		if(board[row+ 1][column - 1] != 2 && (row + 1 <= 7 && column - 1 >= 0))
			mark(row + 1, column - 1, 1);
		if (board[row + 1][column + 1] != 2 && (row + 1 <= 7 && column + 1 <=7))
			mark(row + 1, column + 1, 1);
	}
}
void Bishop(int row, int column) {
	//mark(row, column,2);
	for (int i = row+ 1, j = column + 1; i >= 0 && i <= 7 && j >= 0 && j <= 7; i++, j++) {
		if (board[i][j] == 2)
			break;
		mark(i, j,1);
	}
	for (int i = row -1, j = column -1 ; i >= 0 && i <= 7 && j >= 0 && j <= 7; i--, j--) {
		if (board[i][j] == 2)
			break;
		mark(i, j,1);
	}
	for (int i = row- 1, j = column  +1; i >= 0 && i <= 7 && j >= 0 && j <= 7; i--, j++) {
		if (board[i][j] == 2)
			break;
		mark(i, j,1);
	}
	for (int i = row + 1, j = column -1 ; i >= 0 && i <= 7 && j >= 0 && j <= 7; i++, j--) {
		if (board[i][j] == 2)
			break;
		mark(i, j,1);
	}
}
void Rook(int row, int col) {
	//mark(row, col,2);

	for (int i = row + 1; i <= 7; i++) {
		if (board[i][col] == 2)
			break;
		mark(i, col,1);
	}
	for (int i = row - 1; i >= 0; i--) {
		if (board[i][col] == 2)
			break;
		mark(i, col,1);
	}
	for (int i = col + 1; i <= 7; i++) {
		if (board[row][i] == 2)
			break;
		mark(row, i,1);
	}
	for (int i = col - 1; i >= 0; i--) {
		if (board[row][i] == 2)
			break;
		mark(row, i,1);
	}

}
void Queen(int row, int col) {
	Bishop(row, col);
	Rook(row, col);
}
void King(int r, int c) {
	//mark(r, c, 2);
	for (int i = -1; i <= 1; i++)
	{
		for (int j = -1; j <= 1; j++)
		{
			if (i == 0 && j == 0)
				continue;
			if (r + i == 8 || r + i == -1 || c + j == 8 || c + j == -1)
				continue;
			if(board[r+i][c+j] != 2)
			mark(r + i, c+j,1);
		}
	}

}
void piecesAnalyser(char piece,int r,int c) {
	if(piece != 'p' && piece != 'P')
	piece = tolower(piece);

	switch (piece)
	{
	case 'p':blackPawn(r, c);break;
	case 'P':whitePawn(r, c);break;
	case 'n':Knight(r, c);break;
	case 'b':Bishop(r, c);;break;
	case'r':Rook(r, c);break;
	case 'q':Queen(r, c);break;
	case 'k':King(r, c);break;
	}

}
int main() {
	
	
	ofstream file;
	file.open("some.txt");
	file.clear();
	char inp[8 * 8 + 7 + 2];
	
	//сделать так чтобы \n был в начале.
	//проблемы из- за не очищенного inp'a
	while (scanf("%s", inp) != EOF) {
		
		
		/*if (inp[0] == '\n')
			break;*/
		memset(board, 0, sizeof board);
		int j = 0;
		int pos = 0;
		for (int i = 0; i < 8; i++)
		{
			for ( j;inp[j] != '/' && inp[j] != '\0'; j++)
			{
				x = i, y = j;

				t = inp[j];
				//printf("%c ", inp[j]);
				if (CharacterAnalyser_if_piece_then_return_true(inp[j], &pos))
					mark(i, pos, 2), pos++;
					//piecesAnalyser(inp[j], i, pos), pos++;
														
			}
			if (inp[j] == '\0')
				break;
			j++;
			pos = 0;
		}

		 j = 0;
		 pos = 0;
		for (int i = 0; i < 8; i++)
		{
			for (j;inp[j] != '/' && inp[j] != '\0'; j++)
			{
				x = i, y = j;

				t = inp[j];
				//printf("%c ", inp[j]);
				if (CharacterAnalyser_if_piece_then_return_true(inp[j], &pos))
				
				piecesAnalyser(inp[j], i, pos), pos++;

			}

			if (inp[j] == '\0')
				break;
			j++;
			pos = 0;
		}
		int result = 0;
		for (int i = 0; i < 8; i++)
		{
			for (int j = 0; j < 8; j++)
			{

				if (board[i][j] == 0)
					result++;
				//file << board[i][j] << " ";
			}
			//file << endl;
		}
		file << result << endl;
		//printf("%d\n", result);
	
	}

	file.close();
	return 0;
}
