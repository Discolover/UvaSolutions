#include <stdio.h>
#include <string>
#include <iostream>
#include <sstream>
#include <vector>
#include <array>
#include <algorithm>
#define maxWordLen 16
using namespace std;
array<char, 26> alphabetDictVal;
array<char, 26> alphabetEncVal;
int capacity = 0;


void ClearAlphabet() {
	for (int i = 0; i < 26; i++) {
		alphabetDictVal[i] = '*';
		alphabetEncVal[i] = '*';
	}
		
}
void AddToDict(string word, vector<string> dict[16]) {

	dict[word.length() % maxWordLen].push_back(word);
}
bool CompareStrs(string S1, string S2){

	return (int)S1.length()  < (int)S2.length();
}

vector<string> DelRepets(vector<string> originalSorted) {
	vector<string> line = originalSorted;
	for (int i = 1; i < line.size(); i++)
	{
		if (line[i - 1] == line[i]) {

			line.erase(line.begin() + i);
			i--;

		}
	}
	return line;
}
void ShowDecodedLine(vector<string> original_encLine) {

	for (int i = 0; i < original_encLine.size(); i++)
	{
		if (i != 0)
			cout << ' ';
		for (int j = 0; j < original_encLine[i].length(); j++)
		{
			cout << (char)(alphabetDictVal[original_encLine[i][j] - 97]);
		}
	}
	cout << endl;
}
vector<string> SameLengthDictWords(string encWord, vector<string> dict[16]) {
	return dict[encWord.length() % maxWordLen];
}

bool CompatableLetters(char letter, char dict_letter) {
	if ((alphabetEncVal[dict_letter - 97] == '*')
		&& (alphabetDictVal[letter - 97] == '*'))
		return true;
	if ((alphabetEncVal[dict_letter - 97] == letter)
		&& (alphabetDictVal[letter - 97] == dict_letter))
		return true;

	return false;
}

void UpdateAlphabet(char letter, char dict_letter)
{
	alphabetEncVal[dict_letter - 97] = letter;
	alphabetDictVal[letter - 97] = dict_letter;
}

bool Match(string encWord,string dictWord) {
	array<char, 26> Original_alphabetDictVal = alphabetDictVal;
	array<char, 26> Original_alphabetEnctVal = alphabetEncVal;
	for (int i = 0; i < encWord.length(); i++)
	{
		if (!CompatableLetters(encWord[i], dictWord[i]))
		{
			alphabetDictVal = Original_alphabetDictVal;
			alphabetEncVal = Original_alphabetEnctVal;
			return false;
		}
		UpdateAlphabet(encWord[i], dictWord[i]);
	}
	return true;
}

void RemoveFromDict(string word,int pos, vector<string> dict[]) {
	vector<string> sameSize = dict[word.length() % maxWordLen];
	sameSize.erase(sameSize.begin() + pos);
}
bool FindAlphabet(vector<string> toDecode, vector<string> dict[16])
{
	if (toDecode.empty())
		return true;
	int last = toDecode.size() - 1;

	vector<string> possibleDictWords = 
		SameLengthDictWords(toDecode[last], dict);
	
	for (int i = 0; i < possibleDictWords.size(); i++)
	{
		array<char, 26> Original_alphabetDictVal = alphabetDictVal;
		array<char, 26> Original_alphabetEnctVal = alphabetEncVal;
		if (Match(toDecode[last], possibleDictWords[i])) {

			string tempWord = toDecode[last];
			toDecode.pop_back();
			vector<string> tempVector = possibleDictWords;
			RemoveFromDict(possibleDictWords[i], i,dict);
			if (FindAlphabet(toDecode,dict))
			{
				return true;
			}
			toDecode.push_back(tempWord);
			dict[toDecode[last].length() % maxWordLen] = tempVector;
			alphabetDictVal = Original_alphabetDictVal;
			alphabetEncVal = Original_alphabetEnctVal;
		}
	}
	return false;

}
bool Decode(vector<string> encLine, vector<string> dict[16]) {
	if (FindAlphabet(encLine, dict)) {
		return true;
	}
	else {
		return false;
	}
}
void ShowAsteriskLine(vector<string> line) {

	for (int i = 0; i < line.size(); i++)
	{
		if (i != 0)
			cout << ' ';
		int len = line[i].length();
		for (int j = 0; j < len; j++)
		{
			cout << '*';
		}
	}
	cout << endl;
}
int main()
{
	vector<string> dict[16];

	ClearAlphabet();

	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
	{
		string word;
		cin >> word;
		AddToDict(word, dict);
	}
	string input;
	scanf("\n");
	while (getline(cin, input))
	{
		string word;
		stringstream s(input);
		vector<string> encodedLine;

		bool isdecoded = true;
		while (s >> word)
		{			
			encodedLine.push_back(word);
		}
		vector<string> temp = encodedLine;
		sort(encodedLine.begin(), encodedLine.end(), CompareStrs);

		encodedLine = DelRepets(encodedLine);

		if (Decode(encodedLine, dict))

			ShowDecodedLine(temp);

		else

			ShowAsteriskLine(temp);
		
		ClearAlphabet();

	}
	return 0;
}
